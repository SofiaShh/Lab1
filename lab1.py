# Math

import math

# 1. Найти корни квадратного уравнения ax^2 + bx + c (math.sqrt)

def quadratic_equation(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return "Дискриминант меньше 0, корней нет"
    elif discriminant == 0:
        root = -b / (2*a)
        return f"Один корень: {root}"
    else:
        root1 = (-b + math.sqrt(discriminant)) / (2*a)
        root2 = (-b - math.sqrt(discriminant)) / (2*a)
        return f"Два корня: {root1}, {root2}"
    
print(quadratic_equation(1, -5, 6))  
print(quadratic_equation(1, -4, 4))  
print(quadratic_equation(1, 5, 6))   

# 2. Найти площадь круга (from math import pi)
    
def circle_area(radius):
    area = math.pi * (radius**2)
    return f"Площадь круга: {area}"

print(circle_area(3))

# Counter

from collections import Counter

# 1. Вывести элементы массива, которые встречаются только один раз (или два/три/четыре раза), причём в том порядке, в котором они идут в массиве.
def elements_with_count(array, count):
    counter = Counter(array) # создаём объект класса Counter, который считает количество вхождений каждого элемента в массив
    result = [] # пустой список для хранения результата
    for element in array: # перебираем элементы массива в том порядке, в котором они идут в массиве
        if counter[element] == count: # если количество вхождений элемента равно указанному в функции
            result.append(element) # добавляем элемент в список результата
    return result

array = [1, 2, 3, 4, 5, 6, 7, 2, 4, 6, 8, 2, 4, 9]
print("Элементы, которые встречаются только два раза: ", elements_with_count(array, 2))

# a) Дан массив a из n целых чисел. Напишите программу, которая найдет наибольшее число, которое чаще других встречается в массиве (т.е. если три числа встречаются одинаковое количество раз, нужно найти наибольшее из них).
def most_frequent_max_number(n, a):
    counter = Counter(a) # создаём объект класса Counter, который считает кол-во вхождений каждого числа в массив
    result = a[0] # задаем начальное значение результата первым числом массива
    max_count = counter[result] # начальное значение максимального кол-ва вхождений - кол-во вхождений 1ого числа массива
    for number, count in counter.items(): # перебираем числа массива и их кол-во вхождений
        if count > max_count or (count == max_count and number > result): # если кол-во вхождений числа больше макс. или равно макс., но число > текущего результата
            result = number # текущий результат = этому числу
            max_count = count # макс. кол-во вхождений = кол-ву вхождений этого числа
    return result

n = int(input("Введите количество чисел в массиве: "))
a = [int(i) for i in input("Введите числа через пробел: ").split()]
print("Наибольшее число, которое чаще других встречается в массиве: ", most_frequent_max_number(n, a))

# Itertools

import itertools

# 1. Нужно составить таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов используются пятибуквенные слова, в которых есть только буквы А, Т, О, М, причём буква «М» появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов можно использовать?

k = 0  # счетчик различных кодовых слов
a = list(itertools.product("атом", repeat=6))  # создаем список всех возможных 5-буквенных слов из букв "атом" с повторениями
for x in a:  # перебираем все слова из списка
    if x.count("м") == 1:  # если слово содержит ровно одну букву "м"
        k += 1  # к счетчику различных кодовых слов прибавляем 1
print(k)  # выводим количество различных кодовых слов

# 2. Ученик составляет шестибуквенные слова путём перестановки букв “НЕБО” (или любого другого слова/набора букв). Сколько различных слов можно составить?

k = 0  # счетчик различных слов
a = list(itertools.permutations("НЕБО"))  # создаем список всех возможных перестановок букв слова "НЕБО"
print(len(set(a)))  # Выводим количество различных слов, используя функцию set() для удаления дубликатов


# Cycle

from itertools import cycle  

def infinite(lst, iterations):  # функция с 2 аргументами: список lst и кол-во итераций iterations
    result = ''  # пустая строка для хранения результата
    iter_lst = cycle(lst)  # бесконечный циклический итератор с помощью функции cycle
    if lst:  # если список не пустой
        for symbol in range(iterations):  # выполняем цикл с кол-вом итераций
            result += str(next(iter_lst))  # добавляем к result следующий элемент из итератора, преобразованный в строку
    return result 

print(infinite([2, 5, 8], 7))  
print(infinite([], 1000))  
print(infinite([7], 4)) 

# Обработка данных JSON

import json

# Создаем список словарей с информацией о книгах
books = [
    {'title': 'Biology', 'author': 'One', 'pages': 550},
    {'title': 'English', 'author': 'Two', 'pages': 450},
    {'title': 'Python', 'author': 'Three', 'pages': 600},
    {'title': 'Linguistics', 'author': 'Four', 'pages': 350},
    {'title': 'Literature', 'author': 'Five', 'pages': 700}
]

# Сохраняем список словарей в файл
with open('books.json', 'w') as file:
    json.dump(books, file)

# Открываем файл books.json для чтения
with open('books.json', 'r') as file:
    books = json.load(file) # pагружаем содержимое файла в переменную в виде списка словарей

long_books = [] # пустой список для хранения книг с кол-вом страниц > 500

for book in books: # перебираем каждую книгу
    if book['pages'] > 500: # если кол-во страниц в книге > 500
        long_books.append(book) # добавляем книгу в список long_books

# Выводим список книг с кол-вом страниц > 500
for book in long_books:
    print(book['title']) # выводим название книги


# Манипулирование данными CSV:

# Используя модуль  csv, напишите скрипт, который читает CSV-файл, выполняет вычисления с данными и выводит результаты в новый CSV-файл. 
    
import csv 

# 1. Файл freshman_kgs.csv - создать столбец Weight diff, который будет отражать изменение веса с сентября по апрель. Вывести только те строки, в которых представлены респонденты мужского пола, чья разница в весе неотрицательна, а ИМТ в апреле больше двадцати.

with open('freshman_kgs.csv', mode = 'r') as file: # Открываем файл 'freshman_kgs.csv' в режиме чтения (mode = 'r') и назначаем ему переменную file
    csv_reader = csv.reader(file) # Создаем объект csv_reader, который будет читать файл file
    header = next(csv_reader) # Считываем заголовки столбцов и сохраняем их в переменной header

    with open ('result_kgs.csv', mode = 'w', newline='') as out_file: # Открываем новый файл 'result_kgs.csv' в режиме записи (mode = 'w') и с параметром newline='', который удаляет пустые строки между записями. Назначаем ему переменную out_file
        csv_writer = csv.writer(out_file) # Создаем объект csv_writer, который будет записывать данные в файл out_file
        csv_writer.writerow(header + ['Wight diff']) # Записываем в файл out_file заголовки столбцов из переменной header, добавляя новый столбец 'Wight diff' с помощью метода writerow()

        for i in csv_reader: # Цикл for читает каждую строку из file
            sex=i[0] # Берем значение пола из 1 столбца строки i и сохраняем его в переменной sex
            weight_diff=int(i[1])-int(i[2]) # Вычисляем разницу в весе между сентябрем и апрелем, вычитая значение веса в апр. (2 столбец строки i) из значения веса в сент. (1 столбец строки i) и сохраняем результат в weight_diff
            bmi=float(i[4]) # Берем значение в апреле из 5 столбца строки i и сохраняем его в bmi

            if sex=='M' and weight_diff>=0 and bmi>20.0: # Проверяем условие
                weight_diff=str(weight_diff) # Преобразовываем значение weight_diff в строку
                csv_writer.writerow(i+[weight_diff]) # Записываем в файл out_file все столбцы строки i, добавляя новый столбец 'Wight diff' с помощью метода writerow()

print('Results are in result_kgs.csv file') # Выводим сообщение

# 2. Файл homes.csv, где представлена статистика по продаже домов. Столбцы: цена продажи и запрашиваемая цена (в тыс.долларов), жилая площадь, количество комнат, ванных комнат, возраст дома, количество акров на участке, налог (в долларах). Нужно рассчитать среднюю итоговую стоимость дома с восемью комнатами, а также создать новый столбец, в котором были бы только дома со стоимостью более 180 и налогом менее 3500.

strings=[] # Создаем пустой список "strings", который будет содержать все строки из файла homes.csv

with open ('homes.csv', 'r', newline='') as file: # Открываем файл "homes.csv" для чтения
    csv_reader=csv.reader(file) # Создаем объект-читатель "csv_reader" 
    for row in csv_reader: # Перебираем все строки в файле "homes.csv" с помощью цикла "for" и добавляем их в список "strings".
        strings.append(row) 

total_cost=0 # Создаем переменную "total_cost" для хранения суммарной стоимости всех домов с восемью комнатами и переменную "counts" для подсчета количества таких домов.
counts=0

for row in strings[1:]: # Перебираем все строки в списке "strings", начиная со второй (с индексом 1), т.к. первая строка содержит заголовки столбцов.
    if len(row)>3 and int(row[3])==8: # Проверяем, что длина текущей строки больше 3 и что в 4 столбце содержится число 8, которое соответствует количеству комнат.
        total_cost+=(int(row[0])*1000+int(row[8])) # Добавляем к переменной "total_cost" сумму стоимости дома (при этом переводим тыс. долл в долл.)
        counts+=1 # увеличиваем counts на единицу

average_price=total_cost/counts # Вычисляем среднюю стоимость дома с 8 комнатами

new_rows=[strings[0]] # Создаем новый список "new_rows", который будет содержать только те строки из файла, которые соответствуют условию задачи. Добавляем в список "new_rows" первую строку из файла "homes.csv", которая содержит заголовки столбцов.

for row in strings[1:]: # Перебираем все строки в списке "strings", начиная со второй (с индексом 1)
    if len(row)>8 and int(row[0])>180 and int(row[8])<3500: # Проверяем все условия
        new_rows.append(row) # Добавляем строку в список

with open ('result_homes.csv', 'w', newline='') as fin_file: # Открываем файл "result_homes.csv" для записи
    writer=csv.writer(fin_file) # Создаем объект-писатель "writer"
    for row in new_rows: # Перебираем все строки в списке "new_rows" и записываем их в файл "result_homes.csv"
        writer.writerow(row)

print (f'The average price of houses with 8 rooms is {average_price}') # Выводим на экран среднюю стоимость дома
